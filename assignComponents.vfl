string buttons[] = {'P', 'N', 'Cd', 'uv', 'uv1', 'uv2', 'uv3', 'uv4', 'uv5', 'uv6', 'uv7'};
int channels = chi('../channels');
string class = {'point', 'vertex', 'texture'}[chi('../class')];


void setAttribComponents(string name; string class; int elemnum){
    int elem_num = elemnum;
    int vertex_num = 0;
    
    if (class == 'vertex'){
        elem_num = -1;
        vertex_num = elemnum;
    }

    // Set components of attribute from menus
    int size = 3;
    if (name[:-1] == 'uv'){
        size = 2;
    }else if ( name == 'Cd'){
        size = 4;
    }
    
    string pathPattern = '../%s_%i';
    float componentValues[];
    
    // Loop through component parameters
    for(int i=0; i<size; i++){
        string componentName = chs(sprintf(pathPattern, name, i));
        string componentSplit[] = split(componentName, '.');

        // Handle single floats
        if (componentSplit[1] == '')
            componentSplit[1] = 'x';

        float value = 0;
  
        if (name == 'Cd' && i == 3 && componentName == ' '){
            value = 1;
        }else{
            float attribValue[] = attrib(0, class, componentSplit[0], elemnum);
            value = attribValue[find('xyzw', componentSplit[1])];
        }
        append(componentValues, value);
    }
    
    //Set Value
    if(name == 'Cd'){
        setattrib(0, class, name, elem_num, vertex_num, vector(componentValues));
        setattrib(0, class, 'Alpha', elem_num, vertex_num, componentValues[-1]);  
    }else{
        setattrib(0, class, name, elem_num, vertex_num, vector(componentValues));
        
        if(name == 'N')
            setattribtypeinfo(0, class, name, 'normal');
       
        if (name[:-1] == 'uv')
            setattribtypeinfo(0, class, name, 'texturecoord');
    }
}

// Run through attribute buttons
for(int i=0; i<11; i++){
    // Skip unset buttons
    if (shr(channels, i) % 2 == 0 )
        continue;
        
    string name = buttons[i];
    setAttribComponents(name, class, @elemnum);
}